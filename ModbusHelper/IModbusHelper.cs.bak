//using System;
//using System.Linq;
//using System.Threading.Tasks;

//namespace ModbusHelperBase
//{
//    public interface IModbusHelper : IDisposable
//    {
//        public Endian Endian { get; set; }

//        public ModbusResult Connect(string ip, int port = 502);
//        public ModbusResult Disconnect();

//        #region Write

//        #region bool
//        public ModbusResult Write(int address, bool value, int unitIdentifier = 1);
//        public Task<ModbusResult> WriteAsync(int address, bool value, int unitIdentifier = 1);
//        public ModbusResult Write(int address, bool[] values, int unitIdentifier = 1);
//        #endregion

//        #region short
//        public ModbusResult Write(int address, short value, int unitIdentifier = 1);
//        public ModbusResult Write(int address, short[] values, int unitIdentifier = 1);
//        public ModbusResult Write(int address, ushort value, int unitIdentifier = 1)
//        {
//            return Write(address, Convert.ToInt16(value), unitIdentifier);
//        }

//        public ModbusResult Write(int address, ushort[] values, int unitIdentifier = 1)
//        {
//            var v = values.Select(x => Convert.ToInt16(x));
//            return Write(address, v.ToArray(), unitIdentifier);
//        }
//        #endregion

//        #region int
//        public ModbusResult Write(int address, int value, int unitIdentifier = 1);
//        public ModbusResult Write(int address, int[] values, int unitIdentifier = 1);
//        public ModbusResult Write(int address, uint value, int unitIdentifier = 1)
//        {
//            return Write(address, Convert.ToInt32(value), unitIdentifier);
//        }

//        public ModbusResult Write(int address, uint[] values, int unitIdentifier = 1)
//        {
//            var v = values.Select(x => Convert.ToInt32(x));
//            return Write(address, v.ToArray(), unitIdentifier);
//        }
//        #endregion

//        #region long
//        public ModbusResult Write(int address, long value, int unitIdentifier = 1);
//        public ModbusResult Write(int address, long[] values, int unitIdentifier = 1);
//        public ModbusResult Write(int address, ulong value, int unitIdentifier = 1)
//        {
//            return Write(address, Convert.ToInt64(value), unitIdentifier);
//        }

//        public ModbusResult Write(int address, ulong[] values, int unitIdentifier = 1)
//        {
//            var v = values.Select(x => Convert.ToInt64(x));
//            return Write(address, v.ToArray(), unitIdentifier);
//        }
//        #endregion

//        #region float
//        public ModbusResult Write(int address, float value, int unitIdentifier = 1);
//        public ModbusResult Write(int address, float[] values, int unitIdentifier = 1);
//        #endregion

//        #region double
//        public ModbusResult Write(int address, double value, int unitIdentifier = 1);
//        public ModbusResult Write(int address, double[] values, int unitIdentifier = 1);
//        #endregion

//        #region string
//        public ModbusResult Write(int address, string value, int unitIdentifier = 1);
//        #endregion

//        #endregion

//        #region Read

//        public ModbusResult<T> Read<T>(int address, int unitIdentifier = 1);
//        public ModbusResult<T[]> Read<T>(int address, int quantity, int unitIdentifier = 1);

//        #region bool
//        public ModbusResult<bool> ReadBool(int address, int unitIdentifier = 1);
//        public ModbusResult<bool[]> ReadBool(int address, int quantity, int unitIdentifier = 1);
//        #endregion

//        #region short
//        public ModbusResult<short> ReadShort(int address, int unitIdentifier = 1);
//        public ModbusResult<short[]> ReadShort(int address, int quantity, int unitIdentifier = 1);
//        public ModbusResult<ushort> ReadUShort(int address, int unitIdentifier = 1)
//        {
//            var result = ReadShort(address, unitIdentifier);
//            if (result.Success)
//            {
//                return new ModbusResult<ushort>(Convert.ToUInt16(result.Content));
//            }
//            else
//            {
//                return ModbusResultHelper.CopyErrorInfo<ushort>(result);
//            }
//        }

//        public ModbusResult<ushort[]> ReadUShort(int address, int quantity, int unitIdentifier = 1)
//        {
//            var result = ReadUShort(address, quantity, unitIdentifier);
//            if (result.Success)
//            {
//                var values = result.Content.Select(x => Convert.ToUInt16(x)).ToArray();
//                return new ModbusResult<ushort[]>(values);
//            }
//            else
//            {
//                return ModbusResultHelper.CopyErrorInfo<ushort[]>(result);
//            }
//        }
//        #endregion

//        #region int
//        public ModbusResult<int> ReadInt(int address, int unitIdentifier = 1);
//        public ModbusResult<int[]> ReadInt(int address, int quantity, int unitIdentifier = 1);
//        public ModbusResult<uint> ReadUInt(int address, int unitIdentifier = 1)
//        {
//            var result = ReadInt(address, unitIdentifier);
//            return new ModbusResult<uint>(Convert.ToUInt32(result.Content));
//        }
//        public ModbusResult<uint[]> ReadUInt(int address, int quantity, int unitIdentifier = 1)
//        {
//            var result = ReadInt(address, quantity, unitIdentifier);
//            var values = result.Content.Select(x => Convert.ToUInt32(x)).ToArray();

//            return new ModbusResult<uint[]>(values);
//        }
//        #endregion

//        #region long
//        public ModbusResult<long> ReadLong(int address, int unitIdentifier = 1);
//        public ModbusResult<long[]> ReadLong(int address, int quantity, int unitIdentifier = 1);
//        public ModbusResult<ulong> ReadULong(int address, int unitIdentifier = 1)
//        {
//            var result = ReadLong(address, unitIdentifier);
//            return new ModbusResult<ulong>(Convert.ToUInt64(result.Content));
//        }
//        public ModbusResult<ulong[]> ReadULong(int address, int quantity, int unitIdentifier = 1)
//        {
//            var result = ReadLong(address, quantity, unitIdentifier);
//            var values = result.Content.Select(x => Convert.ToUInt64(x)).ToArray();

//            return new ModbusResult<ulong[]>(values);
//        }
//        #endregion

//        #region
//        public ModbusResult<float> ReadFloat(int address, int unitIdentifier = 1);
//        public ModbusResult<float[]> ReadFloat(int address, int quantity, int unitIdentifier = 1);
//        #endregion

//        #region double
//        public ModbusResult<double> ReadDouble(int address, int unitIdentifier = 1);
//        public ModbusResult<double[]> ReadDouble(int address, int quantity, int unitIdentifier = 1);
//        #endregion

//        #region string
//        public ModbusResult<string> ReadString(int address, int unitIdentifier = 1);
//        #endregion

//        #endregion
//    }
//}
